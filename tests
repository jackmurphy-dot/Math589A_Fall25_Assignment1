# tests/test_solvers.py
import math
import cmath
from quartic_solver import solve_polynomial
from cubic_solver import solve_cubic

def approx_roots_equal(found, expected, tol=1e-8):
    """Compare two lists of roots ignoring order, within tol. Multiplicities count."""
    used = [False]*len(found)
    for e in expected:
        matched = False
        for i,f in enumerate(found):
            if used[i]:
                continue
            if abs(f - e) < tol:
                used[i] = True
                matched = True
                break
        if not matched:
            return False
    return True

def test_quadratic():
    # x^2 - 3x + 2 -> roots 1 and 2
    found = solve_polynomial([1, -3, 2])
    assert approx_roots_equal(found, [1+0j, 2+0j])

def test_cubic_three_real():
    # (x-1)(x-2)(x-3) = x^3 -6x^2 +11x -6
    roots = solve_polynomial([1, -6, 11, -6])
    assert approx_roots_equal(roots, [1+0j, 2+0j, 3+0j])

def test_cubic_complex():
    # x^3 + 1 = 0 -> roots: -1, 1/2 +/- i*sqrt(3)/2
    roots = solve_polynomial([1, 0, 0, 1])
    expected = [-1+0j, 0.5+math.sqrt(3)/2*1j, 0.5-math.sqrt(3)/2*1j]
    assert approx_roots_equal(roots, expected)

def test_quartic_simple():
    # (x-1)^4
    roots = solve_polynomial([1, -4, 6, -4, 1])
    expected = [1+0j, 1+0j, 1+0j, 1+0j]
    assert approx_roots_equal(roots, expected)

def test_quartic_two_quadratics():
    # (x^2+1)(x^2+4) => roots: i,-i,2i,-2i
    roots = solve_polynomial([1, 0, 5, 0, 4])
    expected = [1j, -1j, 2j, -2j]
    assert approx_roots_equal(roots, expected)
